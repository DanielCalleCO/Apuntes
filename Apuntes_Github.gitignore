#! GIT -->
# Es un software de control de versiones, su propósito es llevar registro de los cambios en archivos de computadora y coordinar el trabajo que varias personas realizan sobre archivos compartidos. Existe la posibilidad de trabajar de forma remota y una opción es GitHub. -->

#* Verificar la versión de Git instalada-->
git --version

#* Para ver los archivos dentro de mi ubicación-->
dir // ls
# Git acepta tanto dir que es el comando de windows para ver archivos, como ls que es el comando de linux para lo mismo -->

#* Para cambiar de carpetas -->
cd .../.../
# Nos cambia de carpeta sin importar la ubicación en la que estemos -->

#* Para establecer el nombre del usuario -->
git config --global user.name "Daniel Calle" git config --local user.name
"Daniel Calle"
# Local se usa para un solo proyecto expecifico, y global para todos los proyectos desde esa maquina -->

#* Para establecer el correo del usuario -->
git config --global user.email "danielcalleco@gmail.com" git config --local
user.email "danielcalleco@gmail.com"

#! GITHUB -->
# Es una plataforma de desarrollo colaborativo para alojar proyectos (en la nube) utilizando el sistema de control de versiones Git, Además cuenta con una herramienta muy útil que es GitHub Pages donde podemos publicar nuestros proyectos estáticos (HTML, CSS y JS) gratis -->

#* Clonar localmente un repositorio  -->
git clone https://..........

#* Crear nuevo repositorio  -->
#  echo "# proyect-git" >> README.md
#  git init
#  git add README.md
#  git commit -m "first commit"
#  git branch -M main
#  git remote add origin https://github.com/DanielCalleCO/proyect-git.git
#  git push -u origin main

#* Push repositorio existente a Github -->
#  git remote add origin https://github.com/DanielCalleCO/proyect-git.git!  git branch -M main
#  git push -u origin main

#! UBICACIONES DE LOS REPOSITORIOS -->
#* LOCAL -->
# 1) WORKING DIRECTORY -->
# 2) STAGING AREA -->
# 3) LOCAL REPO -->

#* REMOTE -->
# 4) REMOTE REPO -->

#! ACCIONES PRINCIPALES EN GIT -->

#* Inicializar -->
git init

#* Traer cambios de un branch -->
git pull

#* Ver el status de los archivos contenidos en la carpeta inicializada  -->
git status

#* Añadir archivo // pasar al stage area -->
git add
# se puede añadir archivo por archivo nombrandolo luego de la palabra add, o se pueden añadir todos los archivos pendientes con poner "."(sin las comillas) luego de la palabra add -->

#* Agregar comentarios a los archivos para subir  -->
# Deberíamos generar un commit siempre que nuestra base de código esté en un estado que nos gustaría recordar. Nunca deberíamos tener commits de código que no funcionen, pero tampoco es interesante dejar el commit solo al final de una función. -->
git commit -m
# "git commit guardará todos los cambio hechos en la zona de montaje o área de preparación (staging area), junto con una breve descripción del usuario, en un "commit" al repositorio local. (el -m agrega comentarios)" -->

#* Mostrar diferencias en los archivos (remoto vs local) -->
git diff

#* Mostrar diferencias en los commits -->
git diff _ _ _ _ _ _ _ .. _ _ _ _ _ _ _
# muestras las diferencia entre un commit (primeros 7 digitos) hasta (..) otro commit (primeros 7 digitos) -->

#* Deshacer una modificación que aún no fue agregada al index o stage (antes de hacerle git add) -->
git restore index.html

#* Reversar un archivo que le dimos add (unstage) -->
git restore --staged index.html

#* Reversar a un commit anterior -->
git revert (#####número del commit #####)
# Lo que hará esto es crear un commit nuevo, deshaciendo el commit que le indicamos en la linea -->

#* Quitar del stage area // remover un archivo -->
git rm --cached file
# Este comando es lo contrario de add... sirve para quitar de la "vista" de los cambios o del monitoreo de Git a un archivo. -->

#* Listar los servidores remotos -->
git remote -v

#! LOG  -->
git log
# nos da el ID o hash de los commits, el branch o rama en la que fue hecha el commit, autor (nombre y email), fecha y el commit-->

git log --oneline
# es el resumen del log-->

git log -p
# es el log detallado-->

git log --graph
# me muestra los commits de una manera más gráfica-->

git log -n 2
# me muestra los dos últimos commits-->

:q
# para salir del commit extenso-->

#! IGNORE  -->
# Se crea un archivo llamado .gitignore y si necesito que Git ignore una carpeta, se escribe /"carpeta" (nombre de la carpeta que queremos ignorar) -->

#! BRANCHES -->
# en Github se puede trabajar de forma paralela ya sea en varias secciones del documento o varios usuarios a la vez. Para esto, el sistema Git ofrece lo que se conoce como branch, el cual es simplemente un método de "ramas" para poder realizar modificaciones/actualizaciones sin tocar la rama principal, denominada generalmente master o main.-->

#* Crear un nuevo branch -->
git branch nombreDelBranch

#* Seleccionar un branch -->
git checkout nombreDelBranch

#* Crear y seleccionar un nuevo branch -->
git checkout -b nombreDelBranch

#* Juntar diferentes trabajos -->
# debemos estar dentro de MASTER y luego introducimos el siguiente comando llamando el branch que deseamos unir -->
git merge otroBranch
# El problema con este metodo es que podría crear confusiones ya que realiza un commit del merge -->

#* Juntar los trabajos -->
# debemos estar dentro de MASTER y luego introducimos el siguiente comando llamando el branch que deseamos unir -->
git rebase otroBranch
# Con este metodo, aplicamos los commits de otra branch en el branch master-->

#! STASH -->
# Es una zona donde podremos guardar temporalmente avances que no queremos que se pierdan PERO que no funcionan aún como para ponerlos en un commit-->

#* Iniciar un stash -->
git stash
# Nos va a dar un numero de id del stash, luego, si llegaramos a hacer un commit, ese cambio en el stash no se aplicará -->

#* Ver lista de los stash -->
git stash list

#* Traer un stash -->
git stash apply 0
# El 0 indica la ubicación del stash que quiero cargar-->

#* Eliminar los stash para poderlos subir como commits -->
git stash drop

#* Cargar el último stash y eliminarlo automaticamente  -->
git stash pop
# Nos hace un merge con las modificaciones que ya estaban en el archivo y las que estaban en el stash, lo que nos va a permitir ahora si commitear-->

#! VERSIONES ANTERIORES -->
# Podemos ir a versiones anteriores de nuestros documentos, trabajar allí y luego regresar a las versión más actualizada, manteniendo las modificaciones anteriores en un branch nuevo. Usaremos git log --oneline para ver todos los commits y tomar los primeros 7 digitos del commit al que vamos a regresar -->

#* Regresar aun commit anterior  -->
git checkout _ _ _ _ _ _ _
#Aquí van los 7 primeros numeros del commit al que vamos a ir. En este lugar se puede hacer de todo, incluso commit, solamente que al regresar a un branch existente, se va a eliminar lo que hice-->

# Lo que se puede hacer es crear un nuevo branch desde ese ultimo commit y realizar commits que si van a quedar guardados. -->

#! TAGS -->
# En Git se pueden hacer versiones de nuestros archivos cuando ya hemos finalizado el trabajo y dejar esas versiones inmodificables. Lo que me permite, más adelante, que si necesito nuevamente esa versión, podemos estar seguros de que no ha sido modificada. Usamos los tag -->

#* Agregar un tag  -->
git tag -a v0.1.0 -m "Lanzando la primera versión (beta) de la aplicación"
# Lo que conseguí fue crear un tag con el comando -a (add), le coloque nombre v.0.1.0 y le añadí un mensaje como si se tratara de un commit -->

#* Enviar tag a servidor remoto -->
git push origin v.0.1.0

#! SUBIR A GITHUB -->
#* Working directory ===( GIT ADD )===> Stagging area ===( GIT COMMIT )===> Local repo ===( PUSH )===> Remote repo -->

#! TRAER DE GITHUB -->
#* Remote repo ===( pull )===> Working directory -->
#* Remote repo ===( fetch )===> Local repo -->
#* Local repo ===( checkout )===> Local repo -->
